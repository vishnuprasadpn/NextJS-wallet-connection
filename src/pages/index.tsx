import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { FormEvent, useState } from 'react';
import { 
  type BaseError,
  useSendTransaction, 
  useWaitForTransactionReceipt,
  useWriteContract,
  useReadContract
} from 'wagmi' 
import { parseEther } from 'viem';
import { abi } from './abi';

const Home: NextPage = () => {
  const [value, setValue] = useState<number>(0);
  const [transferRecipient, setTransferRecipient] = useState<string>("");
  const [mintRecipient, setMintRecipient] = useState<string>("");
  const [tokenUri, setTokenUri] = useState<string>("");

  const { data: hashTransaction, error: transactionError, isPending: isTxPending, sendTransaction } = useSendTransaction();
  const { data: hashContract, error: contractError , isPending: isContractPending, writeContract } = useWriteContract();

  const [tokenID, setTokenID] = useState<number>(0);

  const { isLoading: isTransactionConfirming, isSuccess: isTransactionConfirmed } = useWaitForTransactionReceipt({ hash: hashTransaction });
  const { isLoading: isContractConfirming, isSuccess: isContractConfirmed } = useWaitForTransactionReceipt({ hash: hashContract });

  const { data: tokenURI } = useReadContract({
    address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
    abi,
    functionName: 'tokenUri',
    args: [tokenID],
  });

  function handleSubmitTranfer(event: FormEvent<HTMLFormElement>): void {
    event.preventDefault();
    sendTransaction({ to: transferRecipient as `0x${string}`, value: parseEther(value.toString()) });
  }

  function handleSubmitMint(event: FormEvent<HTMLFormElement>): void {
    event.preventDefault()
    // writeContract({
    //   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',
    //   abi,
    //   functionName: 'mint',
    //   args: [mintRecipient, tokenUri],
    // })
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Web3 Next Js Application</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        <div className={styles.formsContainer}>
          <div className={styles.formSection}>
            <h3>Send ETH</h3>
            <form onSubmit={handleSubmitTranfer} className={styles.form}>
              <div className={styles.formGroup}>
                <label htmlFor="recipientInput" className={styles.label}>Recipient Address</label>
                <input 
                  type="text" 
                  id="recipientInput" 
                  value={transferRecipient} 
                  onChange={(e) => setTransferRecipient(e.target.value)}
                  className={styles.input}
                  placeholder="0x..."
                />
              </div>
              
              <div className={styles.formGroup}>
                <label htmlFor="ethValue" className={styles.label}>Amount (ETH)</label>
                <input 
                  type="number" 
                  id="ethValue" 
                  step="0.01" 
                  value={value} 
                  onChange={(e) => setValue(parseFloat(e.target.value))}
                  className={styles.input}
                  placeholder="0.0"
                />
              </div>
              
              <button disabled={isTxPending} type='submit' className={styles.button}> 
                {isTxPending ? 'Confirming...' : 'Send Transaction'}
              </button>
              
              {hashTransaction && (
                <div className={`${styles.status} ${styles.info}`}>
                  Transaction Hash: {hashTransaction}
                </div>
              )}
              
              {isTransactionConfirming && (
                <div className={`${styles.status} ${styles.info}`}>
                  Waiting for confirmation...
                </div>
              )}
              
              {isTransactionConfirmed && (
                <div className={`${styles.status} ${styles.success}`}>
                  Transaction confirmed successfully!
                </div>
              )}
              
              {transactionError && (
                <div className={`${styles.status} ${styles.error}`}>
                  Error: {(transactionError as BaseError).shortMessage || transactionError.message}
                </div>
              )}
            </form>
          </div>

          <div className={styles.formSection}>
            <h3>Mint NFT</h3>
            <form onSubmit={handleSubmitMint} className={styles.form}>
              <div className={styles.formGroup}>
                <label htmlFor="mintRecipientInput" className={styles.label}>Recipient Address</label>
                <input 
                  type="text" 
                  id="mintRecipientInput" 
                  value={mintRecipient} 
                  onChange={(e) => setMintRecipient(e.target.value)}
                  className={styles.input}
                  placeholder="0x..."
                />
              </div>
              
              <div className={styles.formGroup}>
                <label htmlFor="tokenUri" className={styles.label}>Token URI</label>
                <input 
                  type="text" 
                  id="tokenUri" 
                  value={tokenUri} 
                  onChange={(e) => setTokenUri(e.target.value)}
                  className={styles.input}
                  placeholder="ipfs://..."
                />
              </div>
              
              <button disabled={isContractPending} type='submit' className={styles.button}> 
                {isContractPending ? 'Confirming...' : 'Mint NFT'}
              </button>
              {hashContract && (
                <div className={`${styles.status} ${styles.info}`}>
                  Transaction Hash: {hashContract}
                </div>
              )}
              {isContractConfirming && <div>Waiting for confirmation...</div>} 
              {isContractConfirmed && <div>Transaction confirmed.</div>} 
              {contractError && (
                <div>Error: {(contractError as BaseError).shortMessage || contractError.message}</div>
              )}
              
            </form>
          </div>

          <div className={styles.formSection}>
            <h3>Get Token Info</h3>
            <div className={styles.form}>
              <div className={styles.formGroup}>
                <label htmlFor="tokenIdInput" className={styles.label}>Token ID</label>
                <input 
                  type="number" 
                  id="tokenIdInput" 
                  value={tokenID} 
                  onChange={(e) => setTokenID(parseInt(e.target.value) || 0)}
                  className={styles.input}
                  placeholder="0"
                  min="0"
                />
              </div>
              
              <div className={styles.formGroup}>
                <label className={styles.label}>Token URI</label>
                <div className={styles.tokenUriDisplay}>
                  {tokenURI ? (
                    <div className={styles.tokenUriContent}>
                      <strong>URI:</strong> {tokenURI}
                      <button 
                        onClick={() => navigator.clipboard.writeText(tokenURI)}
                        className={styles.copyButton}
                        title="Copy to clipboard"
                      >
                        üìã  
                      </button>
                    </div>
                  ) : (
                    <div className={styles.noData}>
                      Enter a token ID to view the URI
                    </div>
                  )}
                </div>
              </div>
              
              <div className={styles.formGroup}>
                <label className={styles.label}>Token Metadata</label>
                <div className={styles.tokenMetadata}>
                  {tokenURI ? (
                    <div className={styles.metadataContent}>
                      <button 
                        onClick={async () => {
                          try {
                            const response = await fetch(tokenURI);
                            const metadata = await response.json();
                            console.log('Token Metadata:', metadata);
                            alert(`Token Metadata:\n${JSON.stringify(metadata, null, 2)}`);
                          } catch (error) {
                            console.error('Error fetching metadata:', error);
                            alert('Error fetching metadata. Check console for details.');
                          }
                        }}
                        className={styles.metadataButton}
                      >
                        Fetch Metadata
                      </button>
                    </div>
                  ) : (
                    <div className={styles.noData}>
                      Enter a token ID first
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a href="#" rel="noopener noreferrer" target="_blank">
          Made with ‚ù§Ô∏è
        </a>
      </footer>
    </div>
  );
};

export default Home;
